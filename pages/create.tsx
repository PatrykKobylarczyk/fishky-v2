import React, { useState } from "react";
import Head from "next/head";
import styles from "../styles/Create.module.scss";
import Flashcard from "components/Flashcard/Flashcard";
import Category from "components/Category/Category";
import Button from "components/Button/Button";
import { collection, doc, setDoc } from "firebase/firestore";
import { db } from "../firebase";
import useAuth from "hooks/useAuth";

export default function Create() {
  const [front, setFront] = useState("");
  const [back, setBack] = useState("");
  const [error, setError] = useState(false);
  const [btnPath, setBtnPath] = useState("");
  const [category, setCategory] = useState("select category...");
  const [newCategory, setNewCategory] = useState("");
  const [options, setOptions] = useState<any[]>([]);
  const { user } = useAuth();

  const handleNewCard = async () => {
    if (!front || !back) {
      setError(true);
    }
    if (category === "add new...") {
      const cardsRef = collection(db, "users", user!.email!, newCategory);
      await setDoc(doc(cardsRef), {
        front: front,
        back: back,
      });
    } else if (front && back) {
      setError(false);
      const cardsRef = collection(db, "users", user!.email!, category);
      await setDoc(doc(cardsRef), {
        front: front,
        back: back,
      });
    }
    setFront("");
    setBack("");
    setBtnPath("/");
  };

  return (
    <>
      <Head>
        <title>fishky | create new flashcard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <Flashcard>
          <form className={styles.form} onSubmit={handleNewCard}>
            {category !== "add new..." ? (
              <Category
                category={category}
                setCategory={setCategory}
                newCategory={newCategory}
                setOptions={setOptions}
                cardType="learn"
              />
            ) : (
              <input
                type="text"
                name="category"
                placeholder=" enter new category..."
                className={styles.category}
                onChange={(event) => setNewCategory(event.target.value)}
              ></input>
            )}
            <input
              type="text"
              name="front"
              placeholder=" enter front..."
              className={styles.front}
              onChange={(event) => setFront(event.target.value)}
            ></input>
            <input
              type="text"
              name="reverse"
              placeholder="enter reverse..."
              className={styles.back}
              onChange={(event) => setBack(event.target.value)}
            ></input>
            <Button
              buttonType="submit"
              buttonPath={btnPath}
              buttonText="create"
              btnHandler={handleNewCard}
            />
            {error && <p>fill both inputs</p>}
          </form>
        </Flashcard>
      </main>
    </>
  );
}
