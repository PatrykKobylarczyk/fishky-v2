import React, { useEffect, useState } from "react";
import Head from "next/head";
import styles from "../styles/Learn.module.scss";
import Flashcard from "components/Flashcard/Flashcard";
import Category from "components/Category/Category";
import Button from "components/Button/Button";
import { collection, getDocs } from "firebase/firestore";
import { db } from "../firebase";
import useAuth from "hooks/useAuth";
import PrevArrow from "components/Arrows/PrevArrow";
import NextArrow from "components/Arrows/NextArrow";

export default function Learn() {
  const { user } = useAuth();
  const [category, setCategory] = useState("select category...");
  const [error, setError] = useState(false);
  const [_, setOptions] = useState<any[]>([]);
  const [cards, setCards] = useState<any[]>([]);
  const [startLearning, setStartLearning] = useState<boolean>(false);
  const [cardNumber, setCardNumber] = useState(0);

  // get cards from firebase
  const getCards = async (categoryName: string) => {
    const currentCategoryCards: any[] = [];
    const docsRef = collection(db, "users", user!.email!, categoryName);
    const docsSnap = await getDocs(docsRef);
    docsSnap.forEach((doc: any) => {
      currentCategoryCards.push(doc.data());
      setCards(currentCategoryCards);
    });
  };

  useEffect(() => {
    getCards(category);
    if (category !== "select category...") {
      setError(false);
    }
  }, [category]);

  const handleStartLearning = () => {
    if (category === "select category...") {
      setError(true);
    } else {
      setStartLearning(true);
    }
  };

  const handleChangeCard = (arrow: string) => {
    switch (arrow) {
      case "next":
        if (cardNumber === cards.length - 1) {
          setCardNumber(0);
        } else {
          setCardNumber((prev: number) => prev + 1);
        }
        break;
      case "prev":
        if (cardNumber === 0) {
          setCardNumber(cards.length - 1);
        } else {
          setCardNumber((prev: number) => prev - 1);
        }
        break;
      default:
        break;
    }
  };

  return (
    <>
      <Head>
        <title>fishky | learn</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        {!startLearning ? (
          <Flashcard>
            <div className={styles.buttons}>
              <Category
                category={category}
                setCategory={setCategory}
                setOptions={setOptions}
              />
              {error && <p className={styles.errorMessage}>select category!</p>}
              <Button
                buttonType="button"
                buttonText="start"
                btnHandler={handleStartLearning}
                buttonPath={"/learn"}
              />
            </div>
          </Flashcard>
        ) : (
          <div className={styles.learnMode}>
            <PrevArrow handleChangeCard={handleChangeCard} />
            <Flashcard type="learn">
              <div className={styles.front}>
                <h1>{cards[cardNumber].front}</h1>
              </div>
              <div className={styles.back}>
                <h2>{cards[cardNumber].back}</h2>
              </div>
            </Flashcard>
            <NextArrow handleChangeCard={handleChangeCard} />
          </div>
        )}
      </main>
    </>
  );
}
